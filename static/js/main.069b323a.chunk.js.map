{"version":3,"sources":["components/question/index.js","components/questions/index.js","components/question-form/index.js","components/question-modal/index.js","App.js","index.js","assets/cancel.svg","assets/add.svg"],"names":["Question","question","onNextClicked","useState","answered","setAnswered","selectedOption","setSelectedOption","isCorrect","option","answer","className","src","image","downloadUrl","alt","onClick","options","map","index","key","onOptionClicked","GET_QUESTIONS_QUERY","gql","graphql","props","result","loading","data","items","questionsList","questions","currentIndex","setCurrentIndex","score","setScore","showFinished","setShowFinished","currentQuestion","length","id","QUESTION_CREATE_MUTATION","name","closeModal","questionCreate","questionForm","setQuestion","handleSubmit","e","a","preventDefault","variables","toast","handleInputChange","target","value","action","onSubmit","type","placeholder","onChange","maxTags","inputProps","create","maxFiles","pick","style","whiteSpace","Array","isArray","filename","customStyles","content","top","left","right","bottom","marginRight","transform","border","width","height","background","boxShadow","Modal","setAppElement","QuestionModal","isOpen","onRequestClose","contentLabel","Close","token","process","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","modalOpen","setModalOpen","Add","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.069b323a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./question.css\";\n\nconst Question = ({ question, onNextClicked }) => {\n  const [answered, setAnswered] = useState(false);\n  const [selectedOption, setSelectedOption] = useState({});\n\n  const onOptionClicked = (option) => {\n    setAnswered(true);\n    setSelectedOption(option);\n  };\n\n  const isCorrect = (option) => {\n    return option === question.answer;\n  };\n\n  const resetQuestion = () => {\n    setAnswered(false);\n    setSelectedOption({});\n    onNextClicked(selectedOption);\n  };\n\n  return (\n    <div className=\"question\">\n      <div className=\"question-image-holder\">\n        <img\n          className=\"question-image\"\n          src={question.image && question.image.downloadUrl}\n          alt={question}\n        />\n      </div>\n      <section>\n        <div className=\"question-text-holder\">\n          {answered && <button onClick={resetQuestion}>Next</button>}\n          <h4 className=\"question-text\">{question.question}</h4>\n        </div>\n        {question.options.map((option, index) => {\n          return (\n            <button\n              key={index}\n              onClick={() => onOptionClicked(option)}\n              className={`question-option ${\n                answered && isCorrect(option) && \"correct\"\n              } ${selectedOption === option && !isCorrect(option) && \"wrong\"}`}\n            >\n              <span>\n                {answered ? (isCorrect(option) ? \"âœ”\" : \"X\") : index + 1}\n              </span>\n              {option}\n            </button>\n          );\n        })}\n      </section>\n    </div>\n  );\n};\n\nexport default Question;\n","import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { graphql } from \"react-apollo\";\n\nimport Question from \"../question\";\nimport \"./questions.css\";\n\nconst Questions = ({ questions }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showFinished, setShowFinished] = useState(false);\n  const currentQuestion = questions[currentIndex];\n\n  const onNextClicked = (selectedOption) => {\n    // check the answer matches the selected option\n    // increment if true\n    if (currentQuestion.answer === selectedOption) {\n      setScore(score + 1);\n    }\n\n    // check if there is another question in the list\n    // update showFinished if relevent\n    if (currentIndex + 1 > questions.length - 1) {\n      setShowFinished(true);\n      return;\n    }\n    setCurrentIndex(currentIndex + 1);\n  };\n\n  const resetQuiz = () => {\n    setCurrentIndex(0);\n    setShowFinished(false);\n    setScore(0);\n  };\n\n  return questions.length ? (\n    <div>\n      {showFinished ? (\n        <div className=\"results\">\n          <img\n            src=\"https://memegenerator.net/img/instances/70669406/your-watch-has-ended.jpg\"\n            alt=\"Your watch has ended\"\n          />\n          <h3>\n            Your results are out. You scored {score} out of {questions.length}\n          </h3>\n        </div>\n      ) : (\n        <Question\n          onNextClicked={onNextClicked}\n          question={currentQuestion}\n          key={currentQuestion.id}\n        />\n      )}\n      {showFinished ? (\n        <button className=\"try-again\" onClick={resetQuiz}>\n          Try again\n        </button>\n      ) : (\n        <div className=\"questions-progress\">\n          {currentIndex + 1}/{questions.length}\n        </div>\n      )}\n    </div>\n  ) : (\n    <p>Loading...</p>\n  );\n};\n\nconst GET_QUESTIONS_QUERY = gql`\n  query {\n    questionsList {\n      items {\n        id\n        question\n        options\n        answer\n        image {\n          id\n          downloadUrl\n          filename\n        }\n      }\n    }\n  }\n`;\n\nexport default graphql(GET_QUESTIONS_QUERY, {\n  props: (result) => {\n    const { loading, data } = result;\n    let items = [];\n    if (data && data.questionsList) {\n      items = data.questionsList.items;\n    }\n\n    return {\n      loading,\n      questions: items,\n    };\n  },\n})(Questions);\n","import gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport TagsInput from \"react-tagsinput\";\nimport { graphql } from \"react-apollo\";\nimport { FileInput } from \"@8base-react/file-input\";\nimport { toast } from \"react-toastify\";\n\nimport \"react-tagsinput/react-tagsinput.css\";\nimport \"./form.css\";\n\nconst QuestionForm = ({ closeModal, questionCreate }) => {\n  const [questionForm, setQuestion] = useState({\n    options: [],\n    question: \"\",\n    image: {},\n    answer: \"\",\n  });\n\n  const inputProps = {\n    placeholder: \"Add an option and press enter\",\n    className: \"question-input\",\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    await questionCreate({ variables: { data: questionForm } });\n    closeModal();\n    toast(\"Your question has been created successfully\");\n  };\n\n  const handleInputChange = (e) => {\n    e.preventDefault();\n    const {\n      target: { name, value },\n    } = e;\n\n    // update the state\n    setQuestion({\n      ...questionForm,\n      [name]: value,\n    });\n  };\n\n  const handleTagsChange = (options) => {\n    setQuestion({\n      ...questionForm,\n      options,\n    });\n  };\n\n  const handleImageChange = (value) => {\n    setQuestion({\n      ...questionForm,\n      image: { create: value },\n    });\n  };\n\n  return (\n    <form action=\"\" id=\"question-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"question\"\n        placeholder=\"Enter your GOT related question\"\n        onChange={handleInputChange}\n        value={questionForm.question}\n        className=\"question-input\"\n      />\n      <TagsInput\n        value={questionForm.options}\n        onChange={handleTagsChange}\n        maxTags={4}\n        inputProps={inputProps}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Add the answer to the question...\"\n        value={questionForm.answer}\n        onChange={handleInputChange}\n        className=\"question-input\"\n        name=\"answer\"\n      />\n      <FileInput\n        onChange={handleImageChange}\n        value={questionForm.image}\n        maxFiles={1}\n        name=\"image\"\n      >\n        {({ pick, value }) => (\n          <div className=\"image-area\">\n            <button type=\"button\" onClick={pick} className=\"image-upload\">\n              Choose File\n            </button>\n            <p style={{ whiteSpace: \"nowrap\" }}>\n              {value\n                ? Array.isArray(value)\n                  ? `${value.length} files selected`\n                  : value.filename\n                : \"No files selected\"}\n            </p>\n          </div>\n        )}\n      </FileInput>\n      <div className=\"submit-area\">\n        <button className=\"submit-button\" type=\"submit\">\n          Create Question\n        </button>\n      </div>\n    </form>\n  );\n};\n\nconst QUESTION_CREATE_MUTATION = gql`\n  mutation QuestionCreate($data: QuestionCreateInput!) {\n    questionCreate(data: $data) {\n      id\n    }\n  }\n`;\n\nexport default graphql(QUESTION_CREATE_MUTATION, {\n  name: \"questionCreate\",\n})(QuestionForm);\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport QuestionForm from \"../question-form\";\n\nimport \"./modal.css\";\nimport Close from \"../../assets/cancel.svg\";\n\nconst customStyles = {\n  content: {\n    top: \"40%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    border: \"none\",\n    width: \"450px\",\n    height: \"400px\",\n    background: \"#f7f8f9\",\n    boxShadow: \"0 25px 50px -12px rgba(0, 0, 0, 0.25)\",\n  },\n};\n\nModal.setAppElement(\"#root\");\n\nconst QuestionModal = ({ isOpen, closeModal }) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={closeModal}\n      style={customStyles}\n      contentLabel=\"Question Modal\"\n    >\n      <div className=\"modal-header\">\n        <p />\n        <p>Add a question</p>\n        <span onClick={closeModal} className=\"close\">\n          <img src={Close} alt=\"Press button to close modal\" />\n        </span>\n      </div>\n      <QuestionForm closeModal={closeModal} />\n    </Modal>\n  );\n};\n\nexport default QuestionModal;\n","import React, { useState } from \"react\";\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport Questions from \"./components/questions\";\nimport QuestionModal from \"./components/question-modal\";\n\nimport Add from \"./assets/add.svg\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nconst token = process.env.REACT_APP_TOKEN;\n\nconst httpLink = createHttpLink({\n  uri: \"https://api.8base.com/ckf57jmd9000208l10o1t0id7\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst App = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <header>\n          <div>GOT Quiz</div>\n        </header>\n        <Questions />\n        <button className=\"add-question\" onClick={(_) => setModalOpen(true)}>\n          <img src={Add} alt=\"Click to create a new question\" />\n        </button>\n        <QuestionModal isOpen={modalOpen} closeModal={closeModal} />\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","module.exports = __webpack_public_path__ + \"static/media/cancel.ca028cb4.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.e71bd150.svg\";"],"sourceRoot":""}